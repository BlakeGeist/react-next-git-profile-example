{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport update from 'immutability-helper';\nimport { connect } from 'react-redux';\nimport Profile from './Profile';\nimport ProfilesControls from './ProfilesControls';\n\nfunction onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nconst ProfilesContainer = ({\n  profiles,\n  dispatch\n}) => {\n  const {\n    0: profilesArray,\n    1: setProfiles\n  } = useState(profiles);\n\n  if (profilesArray && profilesArray.length !== profiles.length) {\n    setProfiles(profiles.filter(onlyUnique));\n  }\n\n  const moveCard = useCallback((dragIndex, hoverIndex) => {\n    const dragCard = profilesArray[dragIndex];\n    const sortedProfiles = update(profilesArray, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]]\n    });\n    setProfiles(sortedProfiles);\n    dispatch({\n      type: 'SET_ITEM',\n      name: 'profiles',\n      payload: sortedProfiles\n    });\n  }, [profilesArray, dispatch]);\n\n  const removeCard = index => {\n    dispatch({\n      type: 'REMOVE_PROFILE',\n      index\n    });\n  };\n\n  const renderProfile = (profile, index) => {\n    return __jsx(Profile, {\n      key: profile.id,\n      id: profile.id,\n      index: index,\n      moveCard: moveCard,\n      profilesCount: profilesArray.length,\n      removeCard: removeCard,\n      avatarUrl: profile.avatar_url,\n      createdAt: profile.created_at,\n      htmlUrl: profile.html_url,\n      publicRepos: profile.public_repos,\n      reposUrl: profile.repos_url,\n      name: profile.name,\n      company: profile.company,\n      location: profile.location\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProfilesControls, {\n    profiles: profilesArray,\n    update: update,\n    setProfiles: setProfiles\n  }), __jsx(\"div\", {\n    className: \"profiles\"\n  }, profilesArray.map((profile, i) => renderProfile(profile, i))));\n};\n\nconst mapStateToProps = state => ({\n  profiles: state.profiles,\n  rawProfiles: state.rawProfiles,\n  hasSearched: state.hasSearched\n});\n\nexport default connect(mapStateToProps)(ProfilesContainer);","map":null,"metadata":{},"sourceType":"module"}