{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport update from 'immutability-helper';\nimport { connect } from 'react-redux';\nimport Profile from './Profile';\nimport ProfilesControls from './ProfilesControls';\n\nfunction onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nvar ProfilesContainer = function ProfilesContainer(_ref) {\n  var profiles = _ref.profiles,\n      dispatch = _ref.dispatch;\n\n  var _useState = useState(profiles),\n      profilesArray = _useState[0],\n      setProfiles = _useState[1];\n\n  if (profilesArray && profilesArray.length !== profiles.length) {\n    setProfiles(profiles.filter(onlyUnique));\n  }\n\n  var moveCard = useCallback(function (dragIndex, hoverIndex) {\n    var dragCard = profilesArray[dragIndex];\n    var sortedProfiles = update(profilesArray, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]]\n    });\n    setProfiles(sortedProfiles);\n    dispatch({\n      type: 'SET_ITEM',\n      name: 'profiles',\n      payload: sortedProfiles\n    });\n  }, [profilesArray, dispatch]);\n\n  var removeCard = function removeCard(index) {\n    dispatch({\n      type: 'REMOVE_PROFILE',\n      index: index\n    });\n  };\n\n  var renderProfile = function renderProfile(profile, index) {\n    return __jsx(Profile, {\n      key: profile.id,\n      id: profile.id,\n      index: index,\n      moveCard: moveCard,\n      profilesCount: profilesArray.length,\n      removeCard: removeCard,\n      avatarUrl: profile.avatar_url,\n      createdAt: profile.created_at,\n      htmlUrl: profile.html_url,\n      publicRepos: profile.public_repos,\n      reposUrl: profile.repos_url,\n      name: profile.name,\n      company: profile.company,\n      location: profile.location\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProfilesControls, {\n    profiles: profilesArray,\n    update: update,\n    setProfiles: setProfiles\n  }), __jsx(\"div\", {\n    className: \"profiles\"\n  }, profilesArray.map(function (profile, i) {\n    return renderProfile(profile, i);\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    profiles: state.profiles,\n    rawProfiles: state.rawProfiles,\n    hasSearched: state.hasSearched\n  };\n};\n\nexport default connect(mapStateToProps)(ProfilesContainer);","map":null,"metadata":{},"sourceType":"module"}