{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd-cjs';\nimport moment from 'moment';\nimport ItemTypes from '../../../ItemTypes';\nimport Increment from '../Increment';\nconst style = {\n  cursor: 'move'\n};\n\nconst Profile = ({\n  avatarUrl,\n  createdAt,\n  company,\n  id,\n  index,\n  htmlUrl,\n  location,\n  moveCard,\n  name,\n  profilesCount,\n  publicRepos,\n  removeCard,\n  reposUrl\n}) => {\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      const hoverBoundingRect = ref.current.getBoundingClientRect(); // Get vertical middle\n\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      const clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      item.index = hoverIndex;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemTypes.CARD,\n      id,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n\n  const handleIncrement = e => {\n    e.preventDefault();\n    moveCard(index, Number(index) + Number(e.target.value));\n  };\n\n  const handleRemoveProfile = indexed => e => {\n    e.preventDefault();\n    removeCard(indexed);\n  };\n\n  return __jsx(\"div\", {\n    \"data-index\": index,\n    ref: ref,\n    style: _objectSpread({}, style, {\n      opacity\n    }),\n    className: \"profiles-profile\"\n  }, __jsx(\"button\", {\n    className: \"profiles-profile-remove\",\n    onClick: handleRemoveProfile(index),\n    type: \"button\"\n  }, \"remove\"), __jsx(\"div\", {\n    className: \"position\"\n  }, index + 1, __jsx(\"span\", null, index !== 0 && __jsx(Increment, {\n    handleClick: handleIncrement,\n    increment: -1,\n    text: \"\\u2191\"\n  }), profilesCount !== 1 && index < profilesCount - 1 && __jsx(Increment, {\n    handleClick: handleIncrement,\n    increment: 1,\n    text: \"\\u2193\"\n  }))), __jsx(\"a\", {\n    className: \"avatar_url\",\n    href: htmlUrl,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"img\", {\n    src: avatarUrl,\n    height: \"100px\",\n    width: \"100px\",\n    alt: \"User profile avatar\"\n  })), __jsx(\"div\", {\n    className: \"info\"\n  }, name ? __jsx(\"a\", {\n    className: \"name\",\n    href: htmlUrl,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, name) : '', publicRepos ? __jsx(\"a\", {\n    className: \"name\",\n    href: `${htmlUrl}?tab=repositories`,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"Repos:\", ' ', publicRepos) : '', company ? __jsx(\"div\", {\n    className: \"company\"\n  }, company) : '', location ? __jsx(\"div\", {\n    className: \"location\"\n  }, location) : '', __jsx(\"div\", {\n    className: \"created_at\"\n  }, moment(createdAt).format('L'))));\n};\n\nProfile.defaultProps = {\n  company: '',\n  location: '',\n  name: ''\n};\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}